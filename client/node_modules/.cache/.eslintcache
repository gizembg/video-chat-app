[{"/home/gizem/WORKSPACES/WORKSPACE-GIZEM/VIDEO-CHAT-PROJECT/video-chat/client/src/index.tsx":"1","/home/gizem/WORKSPACES/WORKSPACE-GIZEM/VIDEO-CHAT-PROJECT/video-chat/client/src/reportWebVitals.ts":"2","/home/gizem/WORKSPACES/WORKSPACE-GIZEM/VIDEO-CHAT-PROJECT/video-chat/client/src/app/store.ts":"3","/home/gizem/WORKSPACES/WORKSPACE-GIZEM/VIDEO-CHAT-PROJECT/video-chat/client/src/App.tsx":"4","/home/gizem/WORKSPACES/WORKSPACE-GIZEM/VIDEO-CHAT-PROJECT/video-chat/client/src/features/socket/socketSlice.ts":"5","/home/gizem/WORKSPACES/WORKSPACE-GIZEM/VIDEO-CHAT-PROJECT/video-chat/client/src/containers/SocketContainer.tsx":"6","/home/gizem/WORKSPACES/WORKSPACE-GIZEM/VIDEO-CHAT-PROJECT/video-chat/client/src/app/hooks.ts":"7","/home/gizem/WORKSPACES/WORKSPACE-GIZEM/VIDEO-CHAT-PROJECT/video-chat/client/src/components/VideoPanel.tsx":"8","/home/gizem/WORKSPACES/WORKSPACE-GIZEM/VIDEO-CHAT-PROJECT/video-chat/client/src/components/Notification.tsx":"9","/home/gizem/WORKSPACES/WORKSPACE-GIZEM/VIDEO-CHAT-PROJECT/video-chat/client/src/components/Footer.tsx":"10"},{"size":574,"mtime":1658763272909,"results":"11","hashOfConfig":"12"},{"size":425,"mtime":1658684353754,"results":"13","hashOfConfig":"12"},{"size":442,"mtime":1658935836886,"results":"14","hashOfConfig":"12"},{"size":278,"mtime":1658779904894,"results":"15","hashOfConfig":"12"},{"size":2031,"mtime":1658942324719,"results":"16","hashOfConfig":"12"},{"size":3147,"mtime":1658935856562,"results":"17","hashOfConfig":"12"},{"size":350,"mtime":1658684353750,"results":"18","hashOfConfig":"12"},{"size":1021,"mtime":1658942619581,"results":"19","hashOfConfig":"12"},{"size":3615,"mtime":1658936011233,"results":"20","hashOfConfig":"12"},{"size":8265,"mtime":1658941964162,"results":"21","hashOfConfig":"12"},{"filePath":"22","messages":"23","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"17v3tjs",{"filePath":"24","messages":"25","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"26","messages":"27","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"28","messages":"29","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"30","messages":"31","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"32","messages":"33","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"34"},{"filePath":"35","messages":"36","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"37","messages":"38","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"39","messages":"40","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"41","messages":"42","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/gizem/WORKSPACES/WORKSPACE-GIZEM/VIDEO-CHAT-PROJECT/video-chat/client/src/index.tsx",[],"/home/gizem/WORKSPACES/WORKSPACE-GIZEM/VIDEO-CHAT-PROJECT/video-chat/client/src/reportWebVitals.ts",[],"/home/gizem/WORKSPACES/WORKSPACE-GIZEM/VIDEO-CHAT-PROJECT/video-chat/client/src/app/store.ts",[],"/home/gizem/WORKSPACES/WORKSPACE-GIZEM/VIDEO-CHAT-PROJECT/video-chat/client/src/App.tsx",[],"/home/gizem/WORKSPACES/WORKSPACE-GIZEM/VIDEO-CHAT-PROJECT/video-chat/client/src/features/socket/socketSlice.ts",[],"/home/gizem/WORKSPACES/WORKSPACE-GIZEM/VIDEO-CHAT-PROJECT/video-chat/client/src/containers/SocketContainer.tsx",["43"],"import React, { useState, useRef, useEffect } from 'react';\nimport { io } from 'socket.io-client';\nimport Peer from 'simple-peer';\nimport { useAppSelector, useAppDispatch } from '../app/hooks';\nimport { setMe,setCall,setCallAccepted,selectCall,setCallEnded,selectMe,selectName } from '../features/socket/socketSlice';\nimport VideoPanel from '../components/VideoPanel';\nimport Footer from '../components/Footer';\nimport Notification from '../components/Notification';\n\n// const socket = io('http://localhost:5001');\nconst socket = io('https://chat-app-video.herokuapp.com/');\n\ntype VideoStream = {\n  srcObject: MediaStream;\n}\n\nconst SocketContainer: React.FC = React.memo(() => {\n  const dispatch = useAppDispatch();\n  const [stream, setStream] = useState<MediaStream>();\n  const myVideo = useRef<VideoStream>();\n  const userVideo = useRef<VideoStream>();\n  const connectionRef = useRef<Peer.Instance>();\n  const call = useAppSelector(selectCall);\n  const me = useAppSelector(selectMe);\n  const name = useAppSelector(selectName);\n\n  useEffect(() => {\n    navigator.mediaDevices?.getUserMedia({ video: true, audio: true })\n      .then((currentStream) => {\n        setStream(currentStream);\n        if(myVideo.current)\n         myVideo.current.srcObject = currentStream;\n      });\n\n    socket.on('me', (id) => dispatch(setMe(id)));\n    socket.on('callUser', ({ from, name: callerName, signal }) => {\n      dispatch(setCall({ isReceivingCall: true, from, name: callerName, signal }));\n    });\n  }, []);\n\n\n  const answerCall = React.useCallback(() => {\n    dispatch(setCallAccepted(true));\n\n    const peer = new Peer({ initiator: false, trickle: false, stream });\n\n    peer.on('signal', (data) => {\n      socket.emit('answerCall', { signal: data, to: call.from });\n    });\n\n    peer.on('stream', (currentStream) => {\n      if(userVideo.current){\n      userVideo.current.srcObject = currentStream;\n      }\n    });\n\n    peer.signal(call.signal);\n\n    connectionRef.current = peer;\n  },[call.from, call.signal, dispatch, stream]);\n\n  const callUser = React.useCallback((id:string) => {\n    const peer = new Peer({ initiator: true, trickle: false, stream });\n\n    peer.on('signal', (data) => {\n      socket.emit('callUser', { userToCall: id, signalData: data, from: me, name });\n    });\n\n    peer.on('stream', (currentStream) => {\n      if(userVideo.current){\n        userVideo.current.srcObject = currentStream;\n      }\n    });\n\n    socket.on('callAccepted', (signal) => {\n      dispatch(setCallAccepted(true));\n\n      peer.signal(signal);\n    });\n\n    connectionRef.current = peer;\n  },[dispatch, me, name, stream]);\n\n  const leaveCall = React.useCallback( () => {\n    dispatch(setCallEnded(true));\n\n    if(connectionRef.current){\n      connectionRef.current.destroy();\n    }\n\n    window.location.reload();\n  },[dispatch]);\n\n  return (\n<div className='main-screen'>\n  <VideoPanel stream={stream} myVideo={myVideo} userVideo={userVideo}></VideoPanel>\n  <div className='footer'>\n    <Footer callUser={callUser} leaveCall={leaveCall}></Footer>\n  </div>\n  <Notification answerCall={answerCall}></Notification>\n</div>\n  );\n});\n\nexport default SocketContainer\n","/home/gizem/WORKSPACES/WORKSPACE-GIZEM/VIDEO-CHAT-PROJECT/video-chat/client/src/app/hooks.ts",[],"/home/gizem/WORKSPACES/WORKSPACE-GIZEM/VIDEO-CHAT-PROJECT/video-chat/client/src/components/VideoPanel.tsx",[],"/home/gizem/WORKSPACES/WORKSPACE-GIZEM/VIDEO-CHAT-PROJECT/video-chat/client/src/components/Notification.tsx",[],"/home/gizem/WORKSPACES/WORKSPACE-GIZEM/VIDEO-CHAT-PROJECT/video-chat/client/src/components/Footer.tsx",[],{"ruleId":"44","severity":1,"message":"45","line":39,"column":6,"nodeType":"46","endLine":39,"endColumn":8,"suggestions":"47"},"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'dispatch'. Either include it or remove the dependency array.","ArrayExpression",["48"],{"desc":"49","fix":"50"},"Update the dependencies array to be: [dispatch]",{"range":"51","text":"52"},[1494,1496],"[dispatch]"]